<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | @capotej]]></title>
  <link href="http://capotej.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://capotej.com/"/>
  <updated>2012-11-18T19:23:03-08:00</updated>
  <id>http://capotej.com/</id>
  <author>
    <name><![CDATA[Julio Capote]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[announcing finatra 1.0.0]]></title>
    <link href="http://capotej.com/blog/2012/11/07/announcing-finatra-1-0-0/"/>
    <updated>2012-11-07T21:20:00-08:00</updated>
    <id>http://capotej.com/blog/2012/11/07/announcing-finatra-1-0-0</id>
    <content type="html"><![CDATA[<p>After months of work <a href="https://github.com/capotej/finatra#readme">Finatra</a> 1.0.0 is finally available! Finatra is a scala web framework inspired by <a href="https://github.com/sinatra/sinatra#readme">Sinatra</a> built on top of <a href="http://twitter.github.com/finagle">Finagle</a>.</p>

<h3>The API</h3>

<p>The API looks like what you'd expect, here's a simple endpoint that uses route parameters:</p>

<p><code>scala
get("/user/:username") { request =&gt;
  val username = request.routeParams.getOrElse("username", "default_user")
  render.plain("hello " + username).toFuture
}
</code></p>

<p>The <code>toFuture</code> call means that the response is actually a <a href="http://twitter.github.com/scala_school/finagle.html#Future">Future</a>, a powerful concurrency abstraction worth checking out.</p>

<p>Testing it is just as easy:</p>

<p><code>scala
"GET /user/foo" should "responsd with hello foo" in {
  get("/user/foo")
  response.body should equal ("hello foo")
}
</code></p>

<h3>A super quick demo</h3>

<p><code>sh
$ git clone https://github.com/capotej/finatra.git
$ cd finatra
$ ./finatra new com.example.myapp /tmp
</code></p>

<p>Now you have an <code>/tmp/myapp</code> you can use:</p>

<p>```sh</p>

<p>$ cd /tmp/myapp
$ mvn scala:run
```</p>

<p>A simple app should've started up locally on port 7070, verify with:</p>

<p><code>sh
$ curl http://locahost:7070
hello world
</code></p>

<p>You can see the rest of the endpoints at <code>/tmp/myapp/src/main/scala/com/example/myapp/App.scala</code></p>

<h3>Heroku integration</h3>

<p>The generated apps work in heroku out of the box:</p>

<p><code>sh
$ heroku create
$ git init
$ git add .
$ git commit -am 'stuff'
$ git push heroku master
</code></p>

<p>Make sure to see the full details in the <a href="https://github.com/capotej/finatra#readme">README</a> and check out the <a href="https://github.com/capotej/finatra-example">example app</a>.</p>

<p>Props to <a href="http://twitter.com/twoism">@twoism</a> and <a href="http://twitter.com/thisisfranklin">@thisisfranklin</a> for their code, feedback and moral support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[base: a scala project generator]]></title>
    <link href="http://capotej.com/blog/2012/11/01/base-a-scala-project-generator/"/>
    <updated>2012-11-01T14:39:00-07:00</updated>
    <id>http://capotej.com/blog/2012/11/01/base-a-scala-project-generator</id>
    <content type="html"><![CDATA[<p>Finally got tired of copy pasting other projects and gutting them to make new ones, so I created <a href="http://github.com/capotej/base">base</a>, a shell command that creates new scala projects.</p>

<p>Creating the project:</p>

<p><code>sh
$ base new com.capotej.newproj
creating project: newproj
  creating App.scala
  creating AppSpec.scala
  creating pom.xml
  creating .gitignore
  creating .travis.yml
  creating LICENSE
  creating README.markdown
Done! run mvn scala:run to run your projec
</code></p>

<p>Based on the package name, it infered that the project name is <code>newproj</code> and created the project under that folder. Let's build and run it:</p>

<p><code>sh
$ cd newproj
$ mvn compile scala:run
(... maven output ...)
hello world
</code></p>

<p>This uses the new incremental compiler for maven, <a href="http://github.com/typesafehub/zinc">zinc</a>, which dramatically speeds up compile times (except for the first time you run it). It also sets you up with the latest scalatest maven plugin, which gives you sweet looking test output, like so:</p>

<p><img src="http://i.imgur.com/qyyem.png" alt="" /></p>

<p>See the base <a href="http://github.com/capotej/base#readme">README</a> for installation instructions.</p>
]]></content>
  </entry>
  
</feed>
