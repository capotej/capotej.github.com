<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell scripting | @capotej]]></title>
  <link href="http://capotej.com/blog/categories/shell-scripting/atom.xml" rel="self"/>
  <link href="http://capotej.com/"/>
  <updated>2012-11-18T18:46:40-08:00</updated>
  <id>http://capotej.com/</id>
  <author>
    <name><![CDATA[Julio Capote]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[making code generators from your app]]></title>
    <link href="http://capotej.com/blog/2012/11/13/making-code-generators-from-your-app/"/>
    <updated>2012-11-13T21:31:00-08:00</updated>
    <id>http://capotej.com/blog/2012/11/13/making-code-generators-from-your-app</id>
    <content type="html"><![CDATA[<p>Whenever I released a new version of <a href="https://github.com/capotej/finatra#readme">Finatra</a>, I always had update a few things so everything was on the latest version and code:</p>

<p>1) The version in the xml fragment of the main README.markdown has to change</p>

<p>2) The version in the pom.xml of the example app has to change</p>

<p>3) Any api changes, if any, have to be updated in the example app</p>

<p>4) The version in the template pom.xml of the app generator has to change</p>

<p>5) Any api changes, if any, have to be updated inside the app template</p>

<p>After messing this up a few times, I created a <a href="https://github.com/37signals/sub#readme">sub</a> script that generates the example app, the README, <em>and</em> the app generator, straight from unit test! Here's how I did it:</p>

<h2>The source of truth</h2>

<p>A common problem with code generators is the source code they generate quickly becomes out of date, because the templates aren't updated as often as the api changes in the framework. To avoid this, I made a special unit test that I'd use as the "seed" for my generator. A short example:</p>

<p>```scala ExampleAppSpec.scala
class ExampleSpec extends SpecHelper {</p>

<p>  /<em> ###BEGIN_APP### </em>/</p>

<p>  class ExampleApp extends Controller {</p>

<pre><code>/**
 * Basic Example
 *
 * curl http://localhost:7070/hello =&gt; "hello world"
 */
get("/") { request =&gt;
  render.plain("hello world").toFuture
}
</code></pre>

<p>  val app = new ExampleApp</p>

<p>  /<em> ###END_APP### </em>/</p>

<p>  /<em> ###BEGIN_SPEC### </em>/</p>

<p>  "GET /hello" should "respond with hello world" in {</p>

<pre><code>get("/")
response.body should equal ("hello world")
</code></pre>

<p>  }</p>

<p>  /<em> ###END_SPEC### </em>/
}
```</p>

<p>Using the special comments, I can extract a sample app a test suite from the source code.</p>

<h2>The app generator</h2>

<p>Now that we have our "template", we can build our app generator to use it. I customized <a href="http://capotej.com/blog/2012/11/01/base-a-scala-project-generator/">base</a> and ended up with: <a href="https://github.com/capotej/finatra/blob/master/script/finatra/libexec/finatra-new">script/finatra/libexec/finatra-new</a></p>

<p>You can then run</p>

<p><code>sh
$ ./finatra new com.example.myapp
</code></p>

<p>and it will generate <code>myapp/</code> based on the tested example code from the test suite above!</p>

<h2>The example app</h2>

<p>This command uses the generator to generates/update <a href="https://github.com/capotej/finatra-example">finatra-example</a></p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<h1>Usage: finatra update-example</h1>

<h1>Summary: generates the example app from the template</h1>

<p>set -e</p>

<p>source $_FINATRA_ROOT/lib/base.sh</p>

<p>tmpdir=$(mktemp -d /tmp/finatra_example.XXX)</p>

<p>$_FINATRA_ROOT/bin/finatra new com.twitter.finatra_example $tmpdir</p>

<p>cp -Rv $tmpdir/finatra_example/ $EXAMPLE_REPO</p>

<p>rm -rf $tmpdir</p>

<p>cd $EXAMPLE_REPO &amp;&amp; mvn test</p>

<p>```</p>

<p>This also has the neat side effect of testing the app generator and the generated app.</p>

<h2>Updating the README's</h2>

<p>I also have a <a href="https://github.com/capotej/finatra/blob/master/script/finatra/libexec/finatra-update-readme">command</a> for updating the README with fresh examples and version numbers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[base: a scala project generator]]></title>
    <link href="http://capotej.com/blog/2012/11/01/base-a-scala-project-generator/"/>
    <updated>2012-11-01T14:39:00-07:00</updated>
    <id>http://capotej.com/blog/2012/11/01/base-a-scala-project-generator</id>
    <content type="html"><![CDATA[<p>Finally got tired of copy pasting other projects and gutting them to make new ones, so I created <a href="http://github.com/capotej/base">base</a>, a shell command that creates new scala projects.</p>

<p>Creating the project:</p>

<p><code>sh
$ base new com.capotej.newproj
creating project: newproj
  creating App.scala
  creating AppSpec.scala
  creating pom.xml
  creating .gitignore
  creating .travis.yml
  creating LICENSE
  creating README.markdown
Done! run mvn scala:run to run your projec
</code></p>

<p>Based on the package name, it infered that the project name is <code>newproj</code> and created the project under that folder. Let's build and run it:</p>

<p><code>sh
$ cd newproj
$ mvn compile scala:run
(... maven output ...)
hello world
</code></p>

<p>This uses the new incremental compiler for maven, <a href="http://github.com/typesafehub/zinc">zinc</a>, which dramatically speeds up compile times (except for the first time you run it). It also sets you up with the latest scalatest maven plugin, which gives you sweet looking test output, like so:</p>

<p><img src="http://i.imgur.com/qyyem.png" alt="" /></p>

<p>See the base <a href="http://github.com/capotej/base#readme">README</a> for installation instructions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[an embedded key / value store for shell scripts]]></title>
    <link href="http://capotej.com/blog/2012/10/07/an-embedded-key-value-store-for-shell-scripts/"/>
    <updated>2012-10-07T10:06:00-07:00</updated>
    <id>http://capotej.com/blog/2012/10/07/an-embedded-key-value-store-for-shell-scripts</id>
    <content type="html"><![CDATA[<p>UPDATE: this is now available as a <a href="http://github.com/37signals/sub">sub</a> command, here: <a href="http://github.com/capotej/kiev">kiev</a></p>

<p>Cooked this up last night when I needed a simple key/value store for use in a shell script:</p>

<p>```sh db.sh</p>

<h1>!/bin/sh</h1>

<p>DBFILE=example.db</p>

<p>put(){
  echo "export kv_$1=$2" >> $DBFILE
}</p>

<p>del(){
  echo "unset kv_$1" >> $DBFILE
}</p>

<p>get(){
  source $DBFILE
  eval r=\$$(echo "kv_$1")
  echo $r
}</p>

<p>list(){
  source $DBFILE
  for i in $(env | grep "kv_" | cut -d= -f1 ); do</p>

<pre><code>eval r=\$$i; echo $(echo $i | sed -e 's/kv_//') $r;
</code></pre>

<p>  done
}</p>

<h2>cmd dispatch</h2>

<p>if [ ${1:-0} == "set" ]; then
  put $2 $3
elif [ ${1:-0} == "get" ] ; then
  get $2
elif [ ${1:-0} == "list" ] ; then
  list
elif [ ${1:-0} == "del" ] ; then
  del $2
else
  echo "unknown cmd"
fi
```</p>

<p>Use it like so:</p>

<p><code>$ ./db.sh set foo bar</code></p>

<p><code>$ ./db.sh get foo</code></p>

<p><code>$ ./db.sh set foo baz</code></p>

<p><code>$ ./db.sh get foo</code></p>

<p><code>$ ./db.sh del foo</code></p>

<p><code>$ ./db.sh list</code></p>

<h2>How it works</h2>

<p>Every time you update/set/delete a value, it writes a shell expression to an append-only log,
exporting a shell variable (key) with that value. By sourcing the file every time we read a value, we
replay the log, bringing our environment to a consistent state. Then, reading the value is just looking
up that dynamic variable (key) in our shell environment.</p>
]]></content>
  </entry>
  
</feed>
