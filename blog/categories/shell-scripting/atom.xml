<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell scripting | @capotej]]></title>
  <link href="http://capotej.com/blog/categories/shell-scripting/atom.xml" rel="self"/>
  <link href="http://capotej.com/"/>
  <updated>2012-11-08T08:27:46-08:00</updated>
  <id>http://capotej.com/</id>
  <author>
    <name><![CDATA[Julio Capote]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[base: a scala project generator]]></title>
    <link href="http://capotej.com/blog/2012/11/01/base-a-scala-project-generator/"/>
    <updated>2012-11-01T14:39:00-07:00</updated>
    <id>http://capotej.com/blog/2012/11/01/base-a-scala-project-generator</id>
    <content type="html"><![CDATA[<p>Finally got tired of copy pasting other projects and gutting them to make new ones, so I created <a href="http://github.com/capotej/base">base</a>, a shell command that creates new scala projects.</p>

<p>Creating the project:</p>

<p><code>sh
$ base new com.capotej.newproj
creating project: newproj
  creating App.scala
  creating AppSpec.scala
  creating pom.xml
  creating .gitignore
  creating .travis.yml
  creating LICENSE
  creating README.markdown
Done! run mvn scala:run to run your projec
</code></p>

<p>Based on the package name, it infered that the project name is <code>newproj</code> and created the project under that folder. Let's build and run it:</p>

<p><code>sh
$ cd newproj
$ mvn compile scala:run
(... maven output ...)
hello world
</code></p>

<p>This uses the new incremental compiler for maven, <a href="http://github.com/typesafehub/zinc">zinc</a>, which dramatically speeds up compile times (except for the first time you run it). It also sets you up with the latest scalatest maven plugin, which gives you sweet looking test output, like so:</p>

<p><img src="http://i.imgur.com/qyyem.png" alt="" /></p>

<p>See the base <a href="http://github.com/capotej/base#readme">README</a> for installation instructions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[an embedded key / value store for shell scripts]]></title>
    <link href="http://capotej.com/blog/2012/10/07/an-embedded-key-value-store-for-shell-scripts/"/>
    <updated>2012-10-07T10:06:00-07:00</updated>
    <id>http://capotej.com/blog/2012/10/07/an-embedded-key-value-store-for-shell-scripts</id>
    <content type="html"><![CDATA[<p>UPDATE: this is now available as a <a href="http://github.com/37signals/sub">sub</a> command, here: <a href="http://github.com/capotej/kiev">kiev</a></p>

<p>Cooked this up last night when I needed a simple key/value store for use in a shell script:</p>

<p>```sh db.sh</p>

<h1>!/bin/sh</h1>

<p>DBFILE=example.db</p>

<p>put(){
  echo "export kv_$1=$2" >> $DBFILE
}</p>

<p>del(){
  echo "unset kv_$1" >> $DBFILE
}</p>

<p>get(){
  source $DBFILE
  eval r=\$$(echo "kv_$1")
  echo $r
}</p>

<p>list(){
  source $DBFILE
  for i in $(env | grep "kv_" | cut -d= -f1 ); do</p>

<pre><code>eval r=\$$i; echo $(echo $i | sed -e 's/kv_//') $r;
</code></pre>

<p>  done
}</p>

<h2>cmd dispatch</h2>

<p>if [ ${1:-0} == "set" ]; then
  put $2 $3
elif [ ${1:-0} == "get" ] ; then
  get $2
elif [ ${1:-0} == "list" ] ; then
  list
elif [ ${1:-0} == "del" ] ; then
  del $2
else
  echo "unknown cmd"
fi
```</p>

<p>Use it like so:</p>

<p><code>$ ./db.sh set foo bar</code></p>

<p><code>$ ./db.sh get foo</code></p>

<p><code>$ ./db.sh set foo baz</code></p>

<p><code>$ ./db.sh get foo</code></p>

<p><code>$ ./db.sh del foo</code></p>

<p><code>$ ./db.sh list</code></p>

<h2>How it works</h2>

<p>Every time you update/set/delete a value, it writes a shell expression to an append-only log,
exporting a shell variable (key) with that value. By sourcing the file every time we read a value, we
replay the log, bringing our environment to a consistent state. Then, reading the value is just looking
up that dynamic variable (key) in our shell environment.</p>
]]></content>
  </entry>
  
</feed>
